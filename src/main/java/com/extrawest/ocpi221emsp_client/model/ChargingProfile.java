/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * OpenAPI spec version: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.extrawest.ocpi221emsp_client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * ChargingProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T06:10:29.834942772Z[GMT]")

public class ChargingProfile {
  @SerializedName("start_date_time")
  private OffsetDateTime startDateTime = null;

  @SerializedName("duration")
  private Integer duration = null;

  /**
   * Gets or Sets chargingRateUnit
   */
  @JsonAdapter(ChargingRateUnitEnum.Adapter.class)
  public enum ChargingRateUnitEnum {
    @SerializedName("W")
    W("W"),
    @SerializedName("A")
    A("A");

    private String value;

    ChargingRateUnitEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ChargingRateUnitEnum fromValue(String input) {
      for (ChargingRateUnitEnum b : ChargingRateUnitEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ChargingRateUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargingRateUnitEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ChargingRateUnitEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ChargingRateUnitEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("charging_rate_unit")
  private ChargingRateUnitEnum chargingRateUnit = null;

  @SerializedName("min_charging_rate")
  private Float minChargingRate = null;

  @SerializedName("charging_profile_period")
  private List<ChargingProfilePeriod> chargingProfilePeriod = null;

  public ChargingProfile startDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

   /**
   * Get startDateTime
   * @return startDateTime
  **/
  @Schema(description = "")
  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
  }

  public ChargingProfile duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @Schema(description = "")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public ChargingProfile chargingRateUnit(ChargingRateUnitEnum chargingRateUnit) {
    this.chargingRateUnit = chargingRateUnit;
    return this;
  }

   /**
   * Get chargingRateUnit
   * @return chargingRateUnit
  **/
  @Schema(description = "")
  public ChargingRateUnitEnum getChargingRateUnit() {
    return chargingRateUnit;
  }

  public void setChargingRateUnit(ChargingRateUnitEnum chargingRateUnit) {
    this.chargingRateUnit = chargingRateUnit;
  }

  public ChargingProfile minChargingRate(Float minChargingRate) {
    this.minChargingRate = minChargingRate;
    return this;
  }

   /**
   * Get minChargingRate
   * @return minChargingRate
  **/
  @Schema(description = "")
  public Float getMinChargingRate() {
    return minChargingRate;
  }

  public void setMinChargingRate(Float minChargingRate) {
    this.minChargingRate = minChargingRate;
  }

  public ChargingProfile chargingProfilePeriod(List<ChargingProfilePeriod> chargingProfilePeriod) {
    this.chargingProfilePeriod = chargingProfilePeriod;
    return this;
  }

  public ChargingProfile addChargingProfilePeriodItem(ChargingProfilePeriod chargingProfilePeriodItem) {
    if (this.chargingProfilePeriod == null) {
      this.chargingProfilePeriod = new ArrayList<ChargingProfilePeriod>();
    }
    this.chargingProfilePeriod.add(chargingProfilePeriodItem);
    return this;
  }

   /**
   * Get chargingProfilePeriod
   * @return chargingProfilePeriod
  **/
  @Schema(description = "")
  public List<ChargingProfilePeriod> getChargingProfilePeriod() {
    return chargingProfilePeriod;
  }

  public void setChargingProfilePeriod(List<ChargingProfilePeriod> chargingProfilePeriod) {
    this.chargingProfilePeriod = chargingProfilePeriod;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargingProfile chargingProfile = (ChargingProfile) o;
    return Objects.equals(this.startDateTime, chargingProfile.startDateTime) &&
        Objects.equals(this.duration, chargingProfile.duration) &&
        Objects.equals(this.chargingRateUnit, chargingProfile.chargingRateUnit) &&
        Objects.equals(this.minChargingRate, chargingProfile.minChargingRate) &&
        Objects.equals(this.chargingProfilePeriod, chargingProfile.chargingProfilePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDateTime, duration, chargingRateUnit, minChargingRate, chargingProfilePeriod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargingProfile {\n");
    
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    chargingRateUnit: ").append(toIndentedString(chargingRateUnit)).append("\n");
    sb.append("    minChargingRate: ").append(toIndentedString(minChargingRate)).append("\n");
    sb.append("    chargingProfilePeriod: ").append(toIndentedString(chargingProfilePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
