/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * OpenAPI spec version: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.extrawest.ocpi221emsp_client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
/**
 * SignedData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T06:10:29.834942772Z[GMT]")

public class SignedData {
  @SerializedName("encoding_method")
  private String encodingMethod = null;

  @SerializedName("encoding_method_version")
  private Integer encodingMethodVersion = null;

  @SerializedName("public_key")
  private String publicKey = null;

  @SerializedName("signed_values")
  private List<SignedValue> signedValues = null;

  @SerializedName("url")
  private String url = null;

  public SignedData encodingMethod(String encodingMethod) {
    this.encodingMethod = encodingMethod;
    return this;
  }

   /**
   * Get encodingMethod
   * @return encodingMethod
  **/
  @Schema(description = "")
  public String getEncodingMethod() {
    return encodingMethod;
  }

  public void setEncodingMethod(String encodingMethod) {
    this.encodingMethod = encodingMethod;
  }

  public SignedData encodingMethodVersion(Integer encodingMethodVersion) {
    this.encodingMethodVersion = encodingMethodVersion;
    return this;
  }

   /**
   * Get encodingMethodVersion
   * @return encodingMethodVersion
  **/
  @Schema(description = "")
  public Integer getEncodingMethodVersion() {
    return encodingMethodVersion;
  }

  public void setEncodingMethodVersion(Integer encodingMethodVersion) {
    this.encodingMethodVersion = encodingMethodVersion;
  }

  public SignedData publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Get publicKey
   * @return publicKey
  **/
  @Schema(description = "")
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }

  public SignedData signedValues(List<SignedValue> signedValues) {
    this.signedValues = signedValues;
    return this;
  }

  public SignedData addSignedValuesItem(SignedValue signedValuesItem) {
    if (this.signedValues == null) {
      this.signedValues = new ArrayList<SignedValue>();
    }
    this.signedValues.add(signedValuesItem);
    return this;
  }

   /**
   * Get signedValues
   * @return signedValues
  **/
  @Schema(description = "")
  public List<SignedValue> getSignedValues() {
    return signedValues;
  }

  public void setSignedValues(List<SignedValue> signedValues) {
    this.signedValues = signedValues;
  }

  public SignedData url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignedData signedData = (SignedData) o;
    return Objects.equals(this.encodingMethod, signedData.encodingMethod) &&
        Objects.equals(this.encodingMethodVersion, signedData.encodingMethodVersion) &&
        Objects.equals(this.publicKey, signedData.publicKey) &&
        Objects.equals(this.signedValues, signedData.signedValues) &&
        Objects.equals(this.url, signedData.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodingMethod, encodingMethodVersion, publicKey, signedValues, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignedData {\n");
    
    sb.append("    encodingMethod: ").append(toIndentedString(encodingMethod)).append("\n");
    sb.append("    encodingMethodVersion: ").append(toIndentedString(encodingMethodVersion)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    signedValues: ").append(toIndentedString(signedValues)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
