/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * OpenAPI spec version: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.extrawest.ocpi221emsp_client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * TokenDTO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T06:10:29.834942772Z[GMT]")

public class TokenDTO {
  @SerializedName("country_code")
  private String countryCode = null;

  @SerializedName("party_id")
  private String partyId = null;

  @SerializedName("uid")
  private String uid = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("AD_HOC_USER")
    AD_HOC_USER("AD_HOC_USER"),
    @SerializedName("APP_USER")
    APP_USER("APP_USER"),
    @SerializedName("OTHER")
    OTHER("OTHER"),
    @SerializedName("RFID")
    RFID("RFID");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("contract_id")
  private String contractId = null;

  @SerializedName("visual_number")
  private String visualNumber = null;

  @SerializedName("issuer")
  private String issuer = null;

  @SerializedName("group_id")
  private String groupId = null;

  @SerializedName("valid")
  private Boolean valid = null;

  /**
   * Gets or Sets whitelist
   */
  @JsonAdapter(WhitelistEnum.Adapter.class)
  public enum WhitelistEnum {
    @SerializedName("ALWAYS")
    ALWAYS("ALWAYS"),
    @SerializedName("ALLOWED")
    ALLOWED("ALLOWED"),
    @SerializedName("ALLOWED_OFFLINE")
    ALLOWED_OFFLINE("ALLOWED_OFFLINE"),
    @SerializedName("NEVER")
    NEVER("NEVER");

    private String value;

    WhitelistEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static WhitelistEnum fromValue(String input) {
      for (WhitelistEnum b : WhitelistEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<WhitelistEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WhitelistEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public WhitelistEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return WhitelistEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("whitelist")
  private WhitelistEnum whitelist = null;

  @SerializedName("language")
  private String language = null;

  /**
   * Gets or Sets defaultProfileType
   */
  @JsonAdapter(DefaultProfileTypeEnum.Adapter.class)
  public enum DefaultProfileTypeEnum {
    @SerializedName("CHEAP")
    CHEAP("CHEAP"),
    @SerializedName("FAST")
    FAST("FAST"),
    @SerializedName("GREEN")
    GREEN("GREEN"),
    @SerializedName("REGULAR")
    REGULAR("REGULAR");

    private String value;

    DefaultProfileTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static DefaultProfileTypeEnum fromValue(String input) {
      for (DefaultProfileTypeEnum b : DefaultProfileTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<DefaultProfileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultProfileTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DefaultProfileTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DefaultProfileTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("default_profile_type")
  private DefaultProfileTypeEnum defaultProfileType = null;

  @SerializedName("energy_contract")
  private EnergyContract energyContract = null;

  @SerializedName("last_updated")
  private OffsetDateTime lastUpdated = null;

  public TokenDTO countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @Schema(required = true, description = "")
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }

  public TokenDTO partyId(String partyId) {
    this.partyId = partyId;
    return this;
  }

   /**
   * Get partyId
   * @return partyId
  **/
  @Schema(required = true, description = "")
  public String getPartyId() {
    return partyId;
  }

  public void setPartyId(String partyId) {
    this.partyId = partyId;
  }

  public TokenDTO uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * Get uid
   * @return uid
  **/
  @Schema(required = true, description = "")
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }

  public TokenDTO type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public TokenDTO contractId(String contractId) {
    this.contractId = contractId;
    return this;
  }

   /**
   * Get contractId
   * @return contractId
  **/
  @Schema(required = true, description = "")
  public String getContractId() {
    return contractId;
  }

  public void setContractId(String contractId) {
    this.contractId = contractId;
  }

  public TokenDTO visualNumber(String visualNumber) {
    this.visualNumber = visualNumber;
    return this;
  }

   /**
   * Get visualNumber
   * @return visualNumber
  **/
  @Schema(description = "")
  public String getVisualNumber() {
    return visualNumber;
  }

  public void setVisualNumber(String visualNumber) {
    this.visualNumber = visualNumber;
  }

  public TokenDTO issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @Schema(required = true, description = "")
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }

  public TokenDTO groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Get groupId
   * @return groupId
  **/
  @Schema(description = "")
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }

  public TokenDTO valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

   /**
   * Get valid
   * @return valid
  **/
  @Schema(required = true, description = "")
  public Boolean isValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }

  public TokenDTO whitelist(WhitelistEnum whitelist) {
    this.whitelist = whitelist;
    return this;
  }

   /**
   * Get whitelist
   * @return whitelist
  **/
  @Schema(required = true, description = "")
  public WhitelistEnum getWhitelist() {
    return whitelist;
  }

  public void setWhitelist(WhitelistEnum whitelist) {
    this.whitelist = whitelist;
  }

  public TokenDTO language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @Schema(description = "")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public TokenDTO defaultProfileType(DefaultProfileTypeEnum defaultProfileType) {
    this.defaultProfileType = defaultProfileType;
    return this;
  }

   /**
   * Get defaultProfileType
   * @return defaultProfileType
  **/
  @Schema(description = "")
  public DefaultProfileTypeEnum getDefaultProfileType() {
    return defaultProfileType;
  }

  public void setDefaultProfileType(DefaultProfileTypeEnum defaultProfileType) {
    this.defaultProfileType = defaultProfileType;
  }

  public TokenDTO energyContract(EnergyContract energyContract) {
    this.energyContract = energyContract;
    return this;
  }

   /**
   * Get energyContract
   * @return energyContract
  **/
  @Schema(description = "")
  public EnergyContract getEnergyContract() {
    return energyContract;
  }

  public void setEnergyContract(EnergyContract energyContract) {
    this.energyContract = energyContract;
  }

  public TokenDTO lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenDTO tokenDTO = (TokenDTO) o;
    return Objects.equals(this.countryCode, tokenDTO.countryCode) &&
        Objects.equals(this.partyId, tokenDTO.partyId) &&
        Objects.equals(this.uid, tokenDTO.uid) &&
        Objects.equals(this.type, tokenDTO.type) &&
        Objects.equals(this.contractId, tokenDTO.contractId) &&
        Objects.equals(this.visualNumber, tokenDTO.visualNumber) &&
        Objects.equals(this.issuer, tokenDTO.issuer) &&
        Objects.equals(this.groupId, tokenDTO.groupId) &&
        Objects.equals(this.valid, tokenDTO.valid) &&
        Objects.equals(this.whitelist, tokenDTO.whitelist) &&
        Objects.equals(this.language, tokenDTO.language) &&
        Objects.equals(this.defaultProfileType, tokenDTO.defaultProfileType) &&
        Objects.equals(this.energyContract, tokenDTO.energyContract) &&
        Objects.equals(this.lastUpdated, tokenDTO.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, partyId, uid, type, contractId, visualNumber, issuer, groupId, valid, whitelist, language, defaultProfileType, energyContract, lastUpdated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenDTO {\n");
    
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    partyId: ").append(toIndentedString(partyId)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    visualNumber: ").append(toIndentedString(visualNumber)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    whitelist: ").append(toIndentedString(whitelist)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    defaultProfileType: ").append(toIndentedString(defaultProfileType)).append("\n");
    sb.append("    energyContract: ").append(toIndentedString(energyContract)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
