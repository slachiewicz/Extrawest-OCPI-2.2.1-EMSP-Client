/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * OpenAPI spec version: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.extrawest.ocpi221emsp_client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * CdrDimension
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T06:10:29.834942772Z[GMT]")

public class CdrDimension {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("CURRENT")
    CURRENT("CURRENT"),
    @SerializedName("ENERGY")
    ENERGY("ENERGY"),
    @SerializedName("ENERGY_EXPORT")
    ENERGY_EXPORT("ENERGY_EXPORT"),
    @SerializedName("ENERGY_IMPORT")
    ENERGY_IMPORT("ENERGY_IMPORT"),
    @SerializedName("MAX_CURRENT")
    MAX_CURRENT("MAX_CURRENT"),
    @SerializedName("MIN_CURRENT")
    MIN_CURRENT("MIN_CURRENT"),
    @SerializedName("MAX_POWER")
    MAX_POWER("MAX_POWER"),
    @SerializedName("MIN_POWER")
    MIN_POWER("MIN_POWER"),
    @SerializedName("PARKING_TIME")
    PARKING_TIME("PARKING_TIME"),
    @SerializedName("POWER")
    POWER("POWER"),
    @SerializedName("RESERVATION_TIME")
    RESERVATION_TIME("RESERVATION_TIME"),
    @SerializedName("STATE_OF_CHARGE")
    STATE_OF_CHARGE("STATE_OF_CHARGE"),
    @SerializedName("TIME")
    TIME("TIME");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("volume")
  private Float volume = null;

  public CdrDimension type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CdrDimension volume(Float volume) {
    this.volume = volume;
    return this;
  }

   /**
   * Get volume
   * @return volume
  **/
  @Schema(description = "")
  public Float getVolume() {
    return volume;
  }

  public void setVolume(Float volume) {
    this.volume = volume;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CdrDimension cdrDimension = (CdrDimension) o;
    return Objects.equals(this.type, cdrDimension.type) &&
        Objects.equals(this.volume, cdrDimension.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, volume);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CdrDimension {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
