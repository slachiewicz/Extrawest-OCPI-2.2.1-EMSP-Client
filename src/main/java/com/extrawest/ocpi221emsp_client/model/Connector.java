/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * OpenAPI spec version: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.extrawest.ocpi221emsp_client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Connector
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-08-01T06:10:29.834942772Z[GMT]")

public class Connector {
  @SerializedName("url")
  private String url = null;

  @SerializedName("id")
  private String id = null;

  /**
   * Gets or Sets standard
   */
  @JsonAdapter(StandardEnum.Adapter.class)
  public enum StandardEnum {
    @SerializedName("CHADEMO")
    CHADEMO("CHADEMO"),
    @SerializedName("CHAOJI")
    CHAOJI("CHAOJI"),
    @SerializedName("DOMESTIC_A")
    DOMESTIC_A("DOMESTIC_A"),
    @SerializedName("DOMESTIC_B")
    DOMESTIC_B("DOMESTIC_B"),
    @SerializedName("DOMESTIC_C")
    DOMESTIC_C("DOMESTIC_C"),
    @SerializedName("DOMESTIC_D")
    DOMESTIC_D("DOMESTIC_D"),
    @SerializedName("DOMESTIC_E")
    DOMESTIC_E("DOMESTIC_E"),
    @SerializedName("DOMESTIC_F")
    DOMESTIC_F("DOMESTIC_F"),
    @SerializedName("DOMESTIC_G")
    DOMESTIC_G("DOMESTIC_G"),
    @SerializedName("DOMESTIC_H")
    DOMESTIC_H("DOMESTIC_H"),
    @SerializedName("DOMESTIC_I")
    DOMESTIC_I("DOMESTIC_I"),
    @SerializedName("DOMESTIC_J")
    DOMESTIC_J("DOMESTIC_J"),
    @SerializedName("DOMESTIC_K")
    DOMESTIC_K("DOMESTIC_K"),
    @SerializedName("DOMESTIC_L")
    DOMESTIC_L("DOMESTIC_L"),
    @SerializedName("DOMESTIC_M")
    DOMESTIC_M("DOMESTIC_M"),
    @SerializedName("DOMESTIC_N")
    DOMESTIC_N("DOMESTIC_N"),
    @SerializedName("DOMESTIC_O")
    DOMESTIC_O("DOMESTIC_O"),
    @SerializedName("GBT_AC")
    GBT_AC("GBT_AC"),
    @SerializedName("GBT_DC")
    GBT_DC("GBT_DC"),
    @SerializedName("IEC_60309_2_single_16")
    IEC_60309_2_SINGLE_16("IEC_60309_2_single_16"),
    @SerializedName("IEC_60309_2_three_16")
    IEC_60309_2_THREE_16("IEC_60309_2_three_16"),
    @SerializedName("IEC_60309_2_three_32")
    IEC_60309_2_THREE_32("IEC_60309_2_three_32"),
    @SerializedName("IEC_60309_2_three_64")
    IEC_60309_2_THREE_64("IEC_60309_2_three_64"),
    @SerializedName("IEC_62196_T1")
    IEC_62196_T1("IEC_62196_T1"),
    @SerializedName("IEC_62196_T1_COMBO")
    IEC_62196_T1_COMBO("IEC_62196_T1_COMBO"),
    @SerializedName("IEC_62196_T2")
    IEC_62196_T2("IEC_62196_T2"),
    @SerializedName("IEC_62196_T2_COMBO")
    IEC_62196_T2_COMBO("IEC_62196_T2_COMBO"),
    @SerializedName("IEC_62196_T3A")
    IEC_62196_T3A("IEC_62196_T3A"),
    @SerializedName("IEC_62196_T3C")
    IEC_62196_T3C("IEC_62196_T3C"),
    @SerializedName("NEMA_5_20")
    NEMA_5_20("NEMA_5_20"),
    @SerializedName("NEMA_6_30")
    NEMA_6_30("NEMA_6_30"),
    @SerializedName("NEMA_6_50")
    NEMA_6_50("NEMA_6_50"),
    @SerializedName("NEMA_10_30")
    NEMA_10_30("NEMA_10_30"),
    @SerializedName("NEMA_10_50")
    NEMA_10_50("NEMA_10_50"),
    @SerializedName("NEMA_14_30")
    NEMA_14_30("NEMA_14_30"),
    @SerializedName("NEMA_14_50")
    NEMA_14_50("NEMA_14_50"),
    @SerializedName("PANTOGRAPH_BOTTOM_UP")
    PANTOGRAPH_BOTTOM_UP("PANTOGRAPH_BOTTOM_UP"),
    @SerializedName("PANTOGRAPH_TOP_DOWN")
    PANTOGRAPH_TOP_DOWN("PANTOGRAPH_TOP_DOWN"),
    @SerializedName("TESLA_R")
    TESLA_R("TESLA_R"),
    @SerializedName("TESLA_S")
    TESLA_S("TESLA_S");

    private String value;

    StandardEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StandardEnum fromValue(String input) {
      for (StandardEnum b : StandardEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StandardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StandardEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StandardEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StandardEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("standard")
  private StandardEnum standard = null;

  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    @SerializedName("SOCKET")
    SOCKET("SOCKET"),
    @SerializedName("CABLE")
    CABLE("CABLE");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormatEnum fromValue(String input) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FormatEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("format")
  private FormatEnum format = null;

  /**
   * Gets or Sets powerType
   */
  @JsonAdapter(PowerTypeEnum.Adapter.class)
  public enum PowerTypeEnum {
    @SerializedName("AC_1_PHASE")
    AC_1_PHASE("AC_1_PHASE"),
    @SerializedName("AC_2_PHASE")
    AC_2_PHASE("AC_2_PHASE"),
    @SerializedName("AC_2_PHASE_SPLIT")
    AC_2_PHASE_SPLIT("AC_2_PHASE_SPLIT"),
    @SerializedName("AC_3_PHASE")
    AC_3_PHASE("AC_3_PHASE"),
    @SerializedName("DC")
    DC("DC");

    private String value;

    PowerTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PowerTypeEnum fromValue(String input) {
      for (PowerTypeEnum b : PowerTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PowerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PowerTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PowerTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PowerTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("power_type")
  private PowerTypeEnum powerType = null;

  @SerializedName("max_voltage")
  private Integer maxVoltage = null;

  @SerializedName("max_amperage")
  private Integer maxAmperage = null;

  @SerializedName("max_electric_power")
  private Integer maxElectricPower = null;

  @SerializedName("tariff_ids")
  private List<String> tariffIds = null;

  @SerializedName("terms_and_conditions")
  private String termsAndConditions = null;

  @SerializedName("last_updated")
  private OffsetDateTime lastUpdated = null;

  public Connector url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Connector id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Connector standard(StandardEnum standard) {
    this.standard = standard;
    return this;
  }

   /**
   * Get standard
   * @return standard
  **/
  @Schema(description = "")
  public StandardEnum getStandard() {
    return standard;
  }

  public void setStandard(StandardEnum standard) {
    this.standard = standard;
  }

  public Connector format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @Schema(description = "")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public Connector powerType(PowerTypeEnum powerType) {
    this.powerType = powerType;
    return this;
  }

   /**
   * Get powerType
   * @return powerType
  **/
  @Schema(description = "")
  public PowerTypeEnum getPowerType() {
    return powerType;
  }

  public void setPowerType(PowerTypeEnum powerType) {
    this.powerType = powerType;
  }

  public Connector maxVoltage(Integer maxVoltage) {
    this.maxVoltage = maxVoltage;
    return this;
  }

   /**
   * Get maxVoltage
   * @return maxVoltage
  **/
  @Schema(description = "")
  public Integer getMaxVoltage() {
    return maxVoltage;
  }

  public void setMaxVoltage(Integer maxVoltage) {
    this.maxVoltage = maxVoltage;
  }

  public Connector maxAmperage(Integer maxAmperage) {
    this.maxAmperage = maxAmperage;
    return this;
  }

   /**
   * Get maxAmperage
   * @return maxAmperage
  **/
  @Schema(description = "")
  public Integer getMaxAmperage() {
    return maxAmperage;
  }

  public void setMaxAmperage(Integer maxAmperage) {
    this.maxAmperage = maxAmperage;
  }

  public Connector maxElectricPower(Integer maxElectricPower) {
    this.maxElectricPower = maxElectricPower;
    return this;
  }

   /**
   * Get maxElectricPower
   * @return maxElectricPower
  **/
  @Schema(description = "")
  public Integer getMaxElectricPower() {
    return maxElectricPower;
  }

  public void setMaxElectricPower(Integer maxElectricPower) {
    this.maxElectricPower = maxElectricPower;
  }

  public Connector tariffIds(List<String> tariffIds) {
    this.tariffIds = tariffIds;
    return this;
  }

  public Connector addTariffIdsItem(String tariffIdsItem) {
    if (this.tariffIds == null) {
      this.tariffIds = new ArrayList<String>();
    }
    this.tariffIds.add(tariffIdsItem);
    return this;
  }

   /**
   * Get tariffIds
   * @return tariffIds
  **/
  @Schema(description = "")
  public List<String> getTariffIds() {
    return tariffIds;
  }

  public void setTariffIds(List<String> tariffIds) {
    this.tariffIds = tariffIds;
  }

  public Connector termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

   /**
   * Get termsAndConditions
   * @return termsAndConditions
  **/
  @Schema(description = "")
  public String getTermsAndConditions() {
    return termsAndConditions;
  }

  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }

  public Connector lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @Schema(description = "")
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connector connector = (Connector) o;
    return Objects.equals(this.url, connector.url) &&
        Objects.equals(this.id, connector.id) &&
        Objects.equals(this.standard, connector.standard) &&
        Objects.equals(this.format, connector.format) &&
        Objects.equals(this.powerType, connector.powerType) &&
        Objects.equals(this.maxVoltage, connector.maxVoltage) &&
        Objects.equals(this.maxAmperage, connector.maxAmperage) &&
        Objects.equals(this.maxElectricPower, connector.maxElectricPower) &&
        Objects.equals(this.tariffIds, connector.tariffIds) &&
        Objects.equals(this.termsAndConditions, connector.termsAndConditions) &&
        Objects.equals(this.lastUpdated, connector.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, id, standard, format, powerType, maxVoltage, maxAmperage, maxElectricPower, tariffIds, termsAndConditions, lastUpdated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connector {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    standard: ").append(toIndentedString(standard)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    powerType: ").append(toIndentedString(powerType)).append("\n");
    sb.append("    maxVoltage: ").append(toIndentedString(maxVoltage)).append("\n");
    sb.append("    maxAmperage: ").append(toIndentedString(maxAmperage)).append("\n");
    sb.append("    maxElectricPower: ").append(toIndentedString(maxElectricPower)).append("\n");
    sb.append("    tariffIds: ").append(toIndentedString(tariffIds)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
