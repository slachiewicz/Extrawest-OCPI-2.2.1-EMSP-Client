/*
 * OCPI 2.2.1
 * This API exposes endpoints to manage OCPI entities.
 *
 * OpenAPI spec version: 1.0
 * Contact: ocpi@extrawest.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.extrawest.ocpi221emsp_client.api;

import com.extrawest.ocpi221emsp_client.ApiCallback;
import com.extrawest.ocpi221emsp_client.ApiClient;
import com.extrawest.ocpi221emsp_client.ApiException;
import com.extrawest.ocpi221emsp_client.ApiResponse;
import com.extrawest.ocpi221emsp_client.Configuration;
import com.extrawest.ocpi221emsp_client.Pair;
import com.extrawest.ocpi221emsp_client.ProgressRequestBody;
import com.extrawest.ocpi221emsp_client.ProgressResponseBody;

import com.extrawest.ocpi221emsp_client.model.AbstractDomainObject;
import com.extrawest.ocpi221emsp_client.model.LocationDTO;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmspLocationControllerApi {
    private ApiClient apiClient;

    public EmspLocationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmspLocationControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getLocationEvseController
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationEvseControllerCall(String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/emsp/api/2.2.1/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country_code", countryCode));
        if (partyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("party_id", partyId));
        if (locationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_id", locationId));
        if (evseUid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("evse_uid", evseUid));
        if (connectorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("connector_id", connectorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationEvseControllerValidateBeforeCall(String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getLocationEvseController(Async)");
        }
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling getLocationEvseController(Async)");
        }
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling getLocationEvseController(Async)");
        }
        
        com.squareup.okhttp.Call call = getLocationEvseControllerCall(countryCode, partyId, locationId, evseUid, connectorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @return AbstractDomainObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractDomainObject getLocationEvseController(String countryCode, String partyId, String locationId, String evseUid, String connectorId) throws ApiException {
        ApiResponse<AbstractDomainObject> resp = getLocationEvseControllerWithHttpInfo(countryCode, partyId, locationId, evseUid, connectorId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @return ApiResponse&lt;AbstractDomainObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractDomainObject> getLocationEvseControllerWithHttpInfo(String countryCode, String partyId, String locationId, String evseUid, String connectorId) throws ApiException {
        com.squareup.okhttp.Call call = getLocationEvseControllerValidateBeforeCall(countryCode, partyId, locationId, evseUid, connectorId, null, null);
        Type localVarReturnType = new TypeToken<AbstractDomainObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationEvseControllerAsync(String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ApiCallback<AbstractDomainObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationEvseControllerValidateBeforeCall(countryCode, partyId, locationId, evseUid, connectorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AbstractDomainObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchLocation
     * @param body  (required)
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchLocationCall(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/emsp/api/2.2.1/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country_code", countryCode));
        if (partyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("party_id", partyId));
        if (locationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_id", locationId));
        if (evseUid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("evse_uid", evseUid));
        if (connectorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("connector_id", connectorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchLocationValidateBeforeCall(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchLocation(Async)");
        }
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling patchLocation(Async)");
        }
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling patchLocation(Async)");
        }
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling patchLocation(Async)");
        }
        
        com.squareup.okhttp.Call call = patchLocationCall(body, countryCode, partyId, locationId, evseUid, connectorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patchLocation(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId) throws ApiException {
        patchLocationWithHttpInfo(body, countryCode, partyId, locationId, evseUid, connectorId);
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchLocationWithHttpInfo(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId) throws ApiException {
        com.squareup.okhttp.Call call = patchLocationValidateBeforeCall(body, countryCode, partyId, locationId, evseUid, connectorId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchLocationAsync(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchLocationValidateBeforeCall(body, countryCode, partyId, locationId, evseUid, connectorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for pushLocation
     * @param body  (required)
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pushLocationCall(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/emsp/api/2.2.1/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country_code", countryCode));
        if (partyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("party_id", partyId));
        if (locationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_id", locationId));
        if (evseUid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("evse_uid", evseUid));
        if (connectorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("connector_id", connectorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pushLocationValidateBeforeCall(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling pushLocation(Async)");
        }
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling pushLocation(Async)");
        }
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling pushLocation(Async)");
        }
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling pushLocation(Async)");
        }
        
        com.squareup.okhttp.Call call = pushLocationCall(body, countryCode, partyId, locationId, evseUid, connectorId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void pushLocation(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId) throws ApiException {
        pushLocationWithHttpInfo(body, countryCode, partyId, locationId, evseUid, connectorId);
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pushLocationWithHttpInfo(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId) throws ApiException {
        com.squareup.okhttp.Call call = pushLocationValidateBeforeCall(body, countryCode, partyId, locationId, evseUid, connectorId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param countryCode  (required)
     * @param partyId  (required)
     * @param locationId  (required)
     * @param evseUid  (optional)
     * @param connectorId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pushLocationAsync(LocationDTO body, String countryCode, String partyId, String locationId, String evseUid, String connectorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pushLocationValidateBeforeCall(body, countryCode, partyId, locationId, evseUid, connectorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
